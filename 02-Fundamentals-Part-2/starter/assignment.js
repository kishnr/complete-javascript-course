"use strict";

// --- Javascript Fundamental Part 2 ---

console.log(" ");
console.log("Javascript Fundamental Part 2");

// --- Functions ---

console.log(" ");
console.log("Functions");
console.log(" ");

function describeCountry(country, population, capitalCity) {
  return `${country}, has ${population} million people and its capital city is ${capitalCity}`;
}

console.log(describeCountry("Sri Lanka", 22.04, "Sri Jayawardena Pura"));
console.log(describeCountry("\nIndia ", 1428, "New Delhi"));
console.log(describeCountry("\nCanada ", 40.1, "Ottawa"));

// --- Function Declarations vs. Expressions ---

console.log(" ");
console.log("Function Declarations vs. Expressions");
console.log(" ");

const popSriLanka = 22.04;
const popIndia = 1428;
const popCanada = 40.1;

//Function Declaration
console.log("The following output is generated by Function Declarations");
function percentageOfWorld1(population) {
  return ((population / 7900) * 100).toFixed(2);
}

console.log(percentageOfWorld1(popSriLanka) + "%");
console.log(percentageOfWorld1(popIndia) + "%");
console.log(percentageOfWorld1(popCanada) + "%");

//Function Expression

/* Quick note: If a function is initialized by the declaration method, it can be called even
before the initialization, but a function initialized by the expression method cannot be
called before its initialization */

const percentageOfWorld2 = function (population) {
  return ((population / 7900) * 100).toFixed(2);
};

console.log(" ");

console.log("The following output is generated by Function Expressions");
const percSriLanka = percentageOfWorld2(popSriLanka) + "%";
const percIndia = percentageOfWorld2(popIndia) + "%";
const percCanada = percentageOfWorld2(popCanada) + "%";

console.log(percSriLanka);
console.log(percIndia);
console.log(percCanada);

// --- Arrow Functions ---

/* Arrow Functions mainly are used for one line functions with single return statements
As you start adding more and more variables they slowly emulate a function expression
Arrow functions are a more simplified version of Function Expressions */

console.log(" ");
console.log("Arrow Functions");
console.log(" ");

//Arrow Functions
console.log("The following output is generated by Arrow Functions");

const percentageOfWorld3 = (population) =>
  ((population / 7900) * 100).toFixed(2) + "%";

console.log(percentageOfWorld3(popSriLanka));
console.log(percentageOfWorld3(popIndia));
console.log(percentageOfWorld3(popCanada));

// --- Functions calling other functions ---

console.log(" ");
console.log("Functions calling other functions");
console.log(" ");

//Function Declaration

console.log(describePopulation1("Canada", popCanada));

function describePopulation1(country, population) {
  return `${country} has about ${population} million, which is about ${percentageOfWorld1(
    population
  )}% of the world`;
}

//Function Expression
const describePopulation2 = function (country, population) {
  return `${country} has about ${population} million, which is about ${percentageOfWorld2(
    population
  )}% of the world`;
};

console.log(describePopulation2("Sri Lanka", popSriLanka));

//Arrow Function
const describePopulation3 = (country, population) =>
  `${country} has about ${population} million, which is about ${percentageOfWorld3(
    population
  )}% of the world`;

console.log(describePopulation3("India", popIndia));

// --- Introduction to Arrays ---

console.log(" ");
console.log("Introduction to Arrays");
console.log(" ");

const populations = [22.04, 40.1, 1428, 5.92];

console.log(populations.length == 4);

const percentages = new Array(
  percentageOfWorld1(populations[0]),
  percentageOfWorld1(populations[1]),
  percentageOfWorld1(populations[2]),
  percentageOfWorld1(populations[3])
);

console.log(percentages);

// --- Basic Array Operations (Methods) ---

console.log(" ");
console.log("Basic Array Operations (Methods)");
console.log(" ");

const neighbors = new Array("China", "India", "Iran", "Afghanistan");
console.log(neighbors);

neighbors.push("Utopia");
console.log(neighbors);

neighbors.pop("Utopia");
console.log(neighbors);

!neighbors.includes("Germany")
  ? console.log("Probably not a Central European Country")
  : console.log("Probably a Central European Country");

neighbors[neighbors.indexOf('China')] = 'Republic of China'
console.log(neighbors);

// --- Introduction to Objects ---

console.log(" ");
console.log("Introduction to Objects");
console.log(" ");

const myCountry = {
  country : 'Pakistan',
  capital : 'Lahore',
  language : 'Urdu',
  population : 241.5 + ' million',
  neighbors : ["China", "India", "Iran", "Afghanistan"]
}

console.log(myCountry)